*INTERFAZ GRAFICA: 
    uso imagenes .gif? O lo diseño ?

*CONTROLES:  
    abrir archivo - almacenar en un dic? - cerrar archivo

*ROTACION:
    ver en cual estoy en (0.0) y buscar la pos siguiente. (y trasladarla)
    Importante: la constante PIEZAS definida en el TP1 deberá ser reemplazada por la estructura cargada a partir del archivo.
    
    
    0,0;0,1;0,2;1,2 0,0;0,1;1,0;2,0 0,0;1,0;1,1;1,2 0,0;1,0;2,0;2,-1 # L
    
    rotaciones_piezas = [
        [(0,0;0,1;0,2;1,2 )(0,0;0,1;1,0;2,0)( 0,0;1,0;1,1;1,2) (0,0;1,0;2,0;2,-1)],
                             

                        ]




*GUARDAR / CARGAR PARTIDAS
    como implementar?
    Deberia guardar y levantar un archivo en la carpeta.
    Que tendria que guardar?????

*PUNTUACIONES:
    Un leaderboard cuando termina el juego. Si esta entre los 10 mejores se ingresa el nombre y se guarda.

LEADERBOARD = [("Santi", "100"),]

FUNCIONES A AGREGAR EN TETRIS.py:
rotaciones
guardar
cargar
puntuaciones


Consultas para Alejo:
1.- Hardcodeamos para la interfaz grafica?
2.- Al importar el archivo piezas.txt siempre se espera que tenga un comentario como el ej?





























def importar_piezas(ruta_piezas):
    with open(ruta_piezas) as f:
        csv_reader = csv.reader(f, delimiter= " ")
        for posiciones_pieza in csv_reader:
            pieza = ()
            for posicion in posiciones_pieza:
                coordenadas = ",".join(posicion.split(";")).split(",")
                pieza_coor = ()
                for n in coordenadas:
                    if n.lstrip("-").isdigit():
                        pieza_coor += int(n),


                pieza += pieza_coor
            print(pieza)





'''
Asi se ve PIEZAS []
PIEZAS3 = [
    ((0, 0), (1, 0), (0, 1), (1, 1)), # Cubo
    ((0, 0), (1, 0), (1, 1), (2, 1)), # Z (zig-zag)
    ((0, 0), (0, 1), (1, 1), (1, 2)), # S (-Z)
    ((0, 0), (0, 1), (0, 2), (0, 3)), # I (línea)
    ((0, 0), (0, 1), (0, 2), (1, 2)), # L
    ((0, 0), (1, 0), (2, 0), (2, 1)), # -L
    ((0, 0), (1, 0), (2, 0), (1, 1)), # T
]

'''
'''
Asi se ve ROT_PIEZAS
[

(((0, 0), (1, 0), (0, 1), (1, 1)),), 
(((0, 0), (1, 0), (1, 1), (2, 1)), ((0, 0), (0, 1), (0, -1), (1, -1))),
(((0, 0), (0, 1), (1, 1), (1, 2)), ((0, 0), (0, 1), (1, 0), (1, -1))),
(((0, 0), (0, 1), (0, 2), (0, 3)), ((0, 0), (1, 0), (2, 0), (3, 0))), 
(((0, 0), (0, 1), (0, 2), (1, 2)), ((0, 0), (0, 1), (1, 0), (2, 0)), ((0, 0), (1, 0), (1, 1), (1, 2)), ((0, 0), (1, 0), (2, 0), (2, -1))), 
(((0, 0), (1, 0), (2, 0), (2, 1)), ((0, 0), (1, -2), (1, -1), (1, 0)), ((0, 0), (0, 1), (1, 1), (1, 2)), ((0, 0), (0, 1), (0, 2), (1, 0))), 
(((0, 0), (1, 0), (2, 0), (1, 1)), ((0, 0), (1, -1), (1, 0), (1, 2)), ((0, 0), (1, -1), (1, 0), (2, 0)), ((0, 0), (0, 1), (0, 2), (1, 1)))

  
  ]
'''

(((0, 0), (1, 0), (0, 1), (1, 1)),), 
(((0, 0), (1, 0), (1, 1), (2, 1)), 
((0, 0), (0, 1), (0, -1), (1, -1))),
(((0, 0), (0, 1), (1, 1), (1, 2)), ######################
((0, 0), (0, 1), (1, 0), (1, -1))),
(((0, 0), (0, 1), (0, 2), (0, 3)), 
((0, 0), (1, 0), (2, 0), (3, 0))), 
(((0, 0), (0, 1), (0, 2), (1, 2)), 
((0, 0), (0, 1), (1, 0), (2, 0)), 
((0, 0), (1, 0), (1, 1), (1, 2)), 
((0, 0), (1, 0), (2, 0), (2, -1))), 
(((0, 0), (1, 0), (2, 0), (2, 1)), 
((0, 0), (1, -2), (1, -1), (1, 0)), 
((0, 0), (0, 1), (1, 1), (1, 2)), #####################
((0, 0), (0, 1), (0, 2), (1, 0))), 
(((0, 0), (1, 0), (2, 0), (1, 1)), 
((0, 0), (1, -1), (1, 0), (1, 2)), 
((0, 0), (1, -1), (1, 0), (2, 0)), 
((0, 0), (0, 1), (0, 2), (1, 1)))